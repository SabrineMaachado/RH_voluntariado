{"version":3,"sources":["SCORM_API_wrapper.js"],"names":["pipwerks","UTILS","debug","isActive","SCORM","version","handleCompletionStatus","handleExitMode","API","handle","isFound","connection","data","completionStatus","exitStatus","isAvailable","find","win","findAttempts","findAttemptLimit","traceMsgPrefix","trace","scorm","API_1484_11","parent","get","window","top","opener","document","getHandle","initialize","success","makeBoolean","StringToBoolean","errorCode","LMSInitialize","Initialize","getCode","status","save","getInfo","terminate","set","LMSFinish","Terminate","parameter","value","LMSGetValue","GetValue","String","LMSSetValue","SetValue","LMSCommit","Commit","action","cmi","code","parseInt","LMSGetLastError","GetLastError","result","LMSGetErrorString","toString","GetErrorString","getDiagnosticInfo","LMSGetDiagnostic","GetDiagnostic","init","quit","t","test","msg","console","log"],"mappings":"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","sourcesContent":["/*global console*/\n\n/* ===========================================================\n\npipwerks SCORM Wrapper for JavaScript\nv1.1.20160322\n\nCreated by Philip Hutchison, January 2008-2016\nhttps://github.com/pipwerks/scorm-api-wrapper\n\nCopyright (c) Philip Hutchison\nMIT-style license: http://pipwerks.mit-license.org/\n\nThis wrapper works with both SCORM 1.2 and SCORM 2004.\n\nInspired by APIWrapper.js, created by the ADL and\nConcurrent Technologies Corporation, distributed by\nthe ADL (http://www.adlnet.gov/scorm).\n\nSCORM.API.find() and SCORM.API.get() functions based\non ADL code, modified by Mike Rustici\n(http://www.scorm.com/resources/apifinder/SCORMAPIFinder.htm),\nfurther modified by Philip Hutchison\n\n=============================================================== */\n\n\nvar pipwerks = {};                                  //pipwerks 'namespace' helps ensure no conflicts with possible other \"SCORM\" variables\npipwerks.UTILS = {};                                //For holding UTILS functions\npipwerks.debug = { isActive: true };                //Enable (true) or disable (false) for debug mode\n\npipwerks.SCORM = {                                  //Define the SCORM object\n    version:    null,                               //Store SCORM version.\n    handleCompletionStatus: true,                   //Whether or not the wrapper should automatically handle the initial completion status\n    handleExitMode: true,                           //Whether or not the wrapper should automatically handle the exit mode\n    API:        { handle: null,\n                  isFound: false },                 //Create API child object\n    connection: { isActive: false },                //Create connection child object\n    data:       { completionStatus: null,\n                  exitStatus: null },               //Create data child object\n    debug:      {}                                  //Create debug child object\n};\n\n\n\n/* --------------------------------------------------------------------------------\n   pipwerks.SCORM.isAvailable\n   A simple function to allow Flash ExternalInterface to confirm\n   presence of JS wrapper before attempting any LMS communication.\n\n   Parameters: none\n   Returns:    Boolean (true)\n----------------------------------------------------------------------------------- */\n\npipwerks.SCORM.isAvailable = function(){\n    return true;\n};\n\n\n\n// ------------------------------------------------------------------------- //\n// --- SCORM.API functions ------------------------------------------------- //\n// ------------------------------------------------------------------------- //\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.API.find(window)\n   Looks for an object named API in parent and opener windows\n\n   Parameters: window (the browser window object).\n   Returns:    Object if API is found, null if no API found\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.API.find = function(win){\n\n    var API = null,\n        findAttempts = 0,\n        findAttemptLimit = 500,\n        traceMsgPrefix = \"SCORM.API.find\",\n        trace = pipwerks.UTILS.trace,\n        scorm = pipwerks.SCORM;\n\n    while ((!win.API && !win.API_1484_11) &&\n           (win.parent) &&\n           (win.parent != win) &&\n           (findAttempts <= findAttemptLimit)){\n\n                findAttempts++;\n                win = win.parent;\n\n    }\n\n    //If SCORM version is specified by user, look for specific API\n    if(scorm.version){\n\n        switch(scorm.version){\n\n            case \"2004\" :\n\n                if(win.API_1484_11){\n\n                    API = win.API_1484_11;\n\n                } else {\n\n                    trace(traceMsgPrefix +\": SCORM version 2004 was specified by user, but API_1484_11 cannot be found.\");\n\n                }\n\n                break;\n\n            case \"1.2\" :\n\n                if(win.API){\n\n                    API = win.API;\n\n                } else {\n\n                    trace(traceMsgPrefix +\": SCORM version 1.2 was specified by user, but API cannot be found.\");\n\n                }\n\n                break;\n\n        }\n\n    } else {                             //If SCORM version not specified by user, look for APIs\n\n        if(win.API_1484_11) {            //SCORM 2004-specific API.\n\n            scorm.version = \"2004\";      //Set version\n            API = win.API_1484_11;\n\n        } else if(win.API){              //SCORM 1.2-specific API\n\n            scorm.version = \"1.2\";       //Set version\n            API = win.API;\n\n        }\n\n    }\n\n    if(API){\n\n        trace(traceMsgPrefix +\": API found. Version: \" +scorm.version);\n        trace(\"API: \" +API);\n\n    } else {\n\n        trace(traceMsgPrefix +\": Error finding API. \\nFind attempts: \" +findAttempts +\". \\nFind attempt limit: \" +findAttemptLimit);\n\n    }\n\n    return API;\n\n};\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.API.get()\n   Looks for an object named API, first in the current window's frame\n   hierarchy and then, if necessary, in the current window's opener window\n   hierarchy (if there is an opener window).\n\n   Parameters:  None.\n   Returns:     Object if API found, null if no API found\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.API.get = function(){\n\n    var API = null,\n        win = window,\n        scorm = pipwerks.SCORM,\n        find = scorm.API.find,\n        trace = pipwerks.UTILS.trace;\n\n    API = find(win);\n\n    if(!API && win.parent && win.parent != win){\n        API = find(win.parent);\n    }\n\n    if(!API && win.top && win.top.opener){\n        API = find(win.top.opener);\n    }\n\n    //Special handling for Plateau\n    //Thanks to Joseph Venditti for the patch\n    if(!API && win.top && win.top.opener && win.top.opener.document) {\n        API = find(win.top.opener.document);\n    }\n\n    if(API){\n        scorm.API.isFound = true;\n    } else {\n        trace(\"API.get failed: Can't find the API!\");\n    }\n\n    return API;\n\n};\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.API.getHandle()\n   Returns the handle to API object if it was previously set\n\n   Parameters:  None.\n   Returns:     Object (the pipwerks.SCORM.API.handle variable).\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.API.getHandle = function() {\n\n    var API = pipwerks.SCORM.API;\n\n    if(!API.handle && !API.isFound){\n\n        API.handle = API.get();\n\n    }\n\n    return API.handle;\n\n};\n\n\n\n// ------------------------------------------------------------------------- //\n// --- pipwerks.SCORM.connection functions --------------------------------- //\n// ------------------------------------------------------------------------- //\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.connection.initialize()\n   Tells the LMS to initiate the communication session.\n\n   Parameters:  None\n   Returns:     Boolean\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.connection.initialize = function(){\n\n    var success = false,\n        scorm = pipwerks.SCORM,\n        completionStatus = scorm.data.completionStatus,\n        trace = pipwerks.UTILS.trace,\n        makeBoolean = pipwerks.UTILS.StringToBoolean,\n        debug = scorm.debug,\n        traceMsgPrefix = \"SCORM.connection.initialize \";\n\n    trace(\"connection.initialize called.\");\n\n    if(!scorm.connection.isActive){\n\n        var API = scorm.API.getHandle(),\n            errorCode = 0;\n\n        if(API){\n\n            switch(scorm.version){\n                case \"1.2\" : success = makeBoolean(API.LMSInitialize(\"\")); break;\n                case \"2004\": success = makeBoolean(API.Initialize(\"\")); break;\n            }\n\n            if(success){\n\n                //Double-check that connection is active and working before returning 'true' boolean\n                errorCode = debug.getCode();\n\n                if(errorCode !== null && errorCode === 0){\n\n                    scorm.connection.isActive = true;\n\n                    if(scorm.handleCompletionStatus){\n\n                        //Automatically set new launches to incomplete\n                        completionStatus = scorm.status(\"get\");\n\n                        if(completionStatus){\n\n                            switch(completionStatus){\n\n                                //Both SCORM 1.2 and 2004\n                                case \"not attempted\": scorm.status(\"set\", \"incomplete\"); break;\n\n                                //SCORM 2004 only\n                                case \"unknown\" : scorm.status(\"set\", \"incomplete\"); break;\n\n                                //Additional options, presented here in case you'd like to use them\n                                //case \"completed\"  : break;\n                                //case \"incomplete\" : break;\n                                //case \"passed\"     : break;    //SCORM 1.2 only\n                                //case \"failed\"     : break;    //SCORM 1.2 only\n                                //case \"browsed\"    : break;    //SCORM 1.2 only\n\n                            }\n\n                            //Commit changes\n                            scorm.save();\n\n                        }\n\n                    }\n\n                } else {\n\n                    success = false;\n                    trace(traceMsgPrefix +\"failed. \\nError code: \" +errorCode +\" \\nError info: \" +debug.getInfo(errorCode));\n\n                }\n\n            } else {\n\n                errorCode = debug.getCode();\n\n                if(errorCode !== null && errorCode !== 0){\n\n                    trace(traceMsgPrefix +\"failed. \\nError code: \" +errorCode +\" \\nError info: \" +debug.getInfo(errorCode));\n\n                } else {\n\n                    trace(traceMsgPrefix +\"failed: No response from server.\");\n\n                }\n            }\n\n        } else {\n\n            trace(traceMsgPrefix +\"failed: API is null.\");\n\n        }\n\n    } else {\n\n          trace(traceMsgPrefix +\"aborted: Connection already active.\");\n\n     }\n\n     return success;\n\n};\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.connection.terminate()\n   Tells the LMS to terminate the communication session\n\n   Parameters:  None\n   Returns:     Boolean\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.connection.terminate = function(){\n\n    var success = false,\n        scorm = pipwerks.SCORM,\n        exitStatus = scorm.data.exitStatus,\n        completionStatus = scorm.data.completionStatus,\n        trace = pipwerks.UTILS.trace,\n        makeBoolean = pipwerks.UTILS.StringToBoolean,\n        debug = scorm.debug,\n        traceMsgPrefix = \"SCORM.connection.terminate \";\n\n\n    if(scorm.connection.isActive){\n\n        var API = scorm.API.getHandle(),\n            errorCode = 0;\n\n        if(API){\n\n             if(scorm.handleExitMode && !exitStatus){\n\n                if(completionStatus !== \"completed\" && completionStatus !== \"passed\"){\n\n                    switch(scorm.version){\n                        case \"1.2\" : success = scorm.set(\"cmi.core.exit\", \"suspend\"); break;\n                        case \"2004\": success = scorm.set(\"cmi.exit\", \"suspend\"); break;\n                    }\n\n                } else {\n\n                    switch(scorm.version){\n                        case \"1.2\" : success = scorm.set(\"cmi.core.exit\", \"logout\"); break;\n                        case \"2004\": success = scorm.set(\"cmi.exit\", \"normal\"); break;\n                    }\n\n                }\n\n            }\n\n            //Ensure we persist the data\n            success = scorm.save();\n\n            if(success){\n\n                switch(scorm.version){\n                    case \"1.2\" : success = makeBoolean(API.LMSFinish(\"\")); break;\n                    case \"2004\": success = makeBoolean(API.Terminate(\"\")); break;\n                }\n\n                if(success){\n\n                    scorm.connection.isActive = false;\n\n                } else {\n\n                    errorCode = debug.getCode();\n                    trace(traceMsgPrefix +\"failed. \\nError code: \" +errorCode +\" \\nError info: \" +debug.getInfo(errorCode));\n\n                }\n\n            }\n\n        } else {\n\n            trace(traceMsgPrefix +\"failed: API is null.\");\n\n        }\n\n    } else {\n\n        trace(traceMsgPrefix +\"aborted: Connection already terminated.\");\n\n    }\n\n    return success;\n\n};\n\n\n\n// ------------------------------------------------------------------------- //\n// --- pipwerks.SCORM.data functions --------------------------------------- //\n// ------------------------------------------------------------------------- //\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.data.get(parameter)\n   Requests information from the LMS.\n\n   Parameter: parameter (string, name of the SCORM data model element)\n   Returns:   string (the value of the specified data model element)\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.data.get = function(parameter){\n\n    var value = null,\n        scorm = pipwerks.SCORM,\n        trace = pipwerks.UTILS.trace,\n        debug = scorm.debug,\n        traceMsgPrefix = \"SCORM.data.get('\" +parameter +\"') \";\n\n    if(scorm.connection.isActive){\n\n        var API = scorm.API.getHandle(),\n            errorCode = 0;\n\n          if(API){\n\n            switch(scorm.version){\n                case \"1.2\" : value = API.LMSGetValue(parameter); break;\n                case \"2004\": value = API.GetValue(parameter); break;\n            }\n\n            errorCode = debug.getCode();\n\n            //GetValue returns an empty string on errors\n            //If value is an empty string, check errorCode to make sure there are no errors\n            if(value !== \"\" || errorCode === 0){\n\n                //GetValue is successful.\n                //If parameter is lesson_status/completion_status or exit status, let's\n                //grab the value and cache it so we can check it during connection.terminate()\n                switch(parameter){\n\n                    case \"cmi.core.lesson_status\":\n                    case \"cmi.completion_status\" : scorm.data.completionStatus = value; break;\n\n                    case \"cmi.core.exit\":\n                    case \"cmi.exit\"     : scorm.data.exitStatus = value; break;\n\n                }\n\n            } else {\n\n                trace(traceMsgPrefix +\"failed. \\nError code: \" +errorCode +\"\\nError info: \" +debug.getInfo(errorCode));\n\n            }\n\n        } else {\n\n            trace(traceMsgPrefix +\"failed: API is null.\");\n\n        }\n\n    } else {\n\n        trace(traceMsgPrefix +\"failed: API connection is inactive.\");\n\n    }\n\n    trace(traceMsgPrefix +\" value: \" +value);\n\n    return String(value);\n\n};\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.data.set()\n   Tells the LMS to assign the value to the named data model element.\n   Also stores the SCO's completion status in a variable named\n   pipwerks.SCORM.data.completionStatus. This variable is checked whenever\n   pipwerks.SCORM.connection.terminate() is invoked.\n\n   Parameters: parameter (string). The data model element\n               value (string). The value for the data model element\n   Returns:    Boolean\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.data.set = function(parameter, value){\n\n    var success = false,\n        scorm = pipwerks.SCORM,\n        trace = pipwerks.UTILS.trace,\n        makeBoolean = pipwerks.UTILS.StringToBoolean,\n        debug = scorm.debug,\n        traceMsgPrefix = \"SCORM.data.set('\" +parameter +\"') \";\n\n\n    if(scorm.connection.isActive){\n\n        var API = scorm.API.getHandle(),\n            errorCode = 0;\n\n        if(API){\n\n            switch(scorm.version){\n                case \"1.2\" : success = makeBoolean(API.LMSSetValue(parameter, value)); break;\n                case \"2004\": success = makeBoolean(API.SetValue(parameter, value)); break;\n            }\n\n            if(success){\n\n                if(parameter === \"cmi.core.lesson_status\" || parameter === \"cmi.completion_status\"){\n\n                    scorm.data.completionStatus = value;\n\n                }\n\n            } else {\n\n                errorCode = debug.getCode();\n\n                trace(traceMsgPrefix +\"failed. \\nError code: \" +errorCode +\". \\nError info: \" +debug.getInfo(errorCode));\n\n            }\n\n        } else {\n\n            trace(traceMsgPrefix +\"failed: API is null.\");\n\n        }\n\n    } else {\n\n        trace(traceMsgPrefix +\"failed: API connection is inactive.\");\n\n    }\n\n\ttrace(traceMsgPrefix +\" value: \" +value);\n\n    return success;\n\n};\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.data.save()\n   Instructs the LMS to persist all data to this point in the session\n\n   Parameters: None\n   Returns:    Boolean\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.data.save = function(){\n\n    var success = false,\n        scorm = pipwerks.SCORM,\n        trace = pipwerks.UTILS.trace,\n        makeBoolean = pipwerks.UTILS.StringToBoolean,\n        traceMsgPrefix = \"SCORM.data.save failed\";\n\n\n    if(scorm.connection.isActive){\n\n        var API = scorm.API.getHandle();\n\n        if(API){\n\n            switch(scorm.version){\n                case \"1.2\" : success = makeBoolean(API.LMSCommit(\"\")); break;\n                case \"2004\": success = makeBoolean(API.Commit(\"\")); break;\n            }\n\n        } else {\n\n            trace(traceMsgPrefix +\": API is null.\");\n\n        }\n\n    } else {\n\n        trace(traceMsgPrefix +\": API connection is inactive.\");\n\n    }\n\n    return success;\n\n};\n\n\npipwerks.SCORM.status = function (action, status){\n\n    var success = false,\n        scorm = pipwerks.SCORM,\n        trace = pipwerks.UTILS.trace,\n        traceMsgPrefix = \"SCORM.getStatus failed\",\n        cmi = \"\";\n\n    if(action !== null){\n\n        switch(scorm.version){\n            case \"1.2\" : cmi = \"cmi.core.lesson_status\"; break;\n            case \"2004\": cmi = \"cmi.completion_status\"; break;\n        }\n\n        switch(action){\n\n            case \"get\": success = scorm.data.get(cmi); break;\n\n            case \"set\": if(status !== null){\n\n                            success = scorm.data.set(cmi, status);\n\n                        } else {\n\n                            success = false;\n                            trace(traceMsgPrefix +\": status was not specified.\");\n\n                        }\n\n                        break;\n\n            default      : success = false;\n                        trace(traceMsgPrefix +\": no valid action was specified.\");\n\n        }\n\n    } else {\n\n        trace(traceMsgPrefix +\": action was not specified.\");\n\n    }\n\n    return success;\n\n};\n\n\n// ------------------------------------------------------------------------- //\n// --- pipwerks.SCORM.debug functions -------------------------------------- //\n// ------------------------------------------------------------------------- //\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.debug.getCode\n   Requests the error code for the current error state from the LMS\n\n   Parameters: None\n   Returns:    Integer (the last error code).\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.debug.getCode = function(){\n\n    var scorm = pipwerks.SCORM,\n        API = scorm.API.getHandle(),\n        trace = pipwerks.UTILS.trace,\n        code = 0;\n\n    if(API){\n\n        switch(scorm.version){\n            case \"1.2\" : code = parseInt(API.LMSGetLastError(), 10); break;\n            case \"2004\": code = parseInt(API.GetLastError(), 10); break;\n        }\n\n    } else {\n\n        trace(\"SCORM.debug.getCode failed: API is null.\");\n\n    }\n\n    return code;\n\n};\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.debug.getInfo()\n   \"Used by a SCO to request the textual description for the error code\n   specified by the value of [errorCode].\"\n\n   Parameters: errorCode (integer).\n   Returns:    String.\n----------------------------------------------------------------------------- */\n\npipwerks.SCORM.debug.getInfo = function(errorCode){\n\n    var scorm = pipwerks.SCORM,\n        API = scorm.API.getHandle(),\n        trace = pipwerks.UTILS.trace,\n        result = \"\";\n\n\n    if(API){\n\n        switch(scorm.version){\n            case \"1.2\" : result = API.LMSGetErrorString(errorCode.toString()); break;\n            case \"2004\": result = API.GetErrorString(errorCode.toString()); break;\n        }\n\n    } else {\n\n        trace(\"SCORM.debug.getInfo failed: API is null.\");\n\n    }\n\n    return String(result);\n\n};\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.debug.getDiagnosticInfo\n   \"Exists for LMS specific use. It allows the LMS to define additional\n   diagnostic information through the API Instance.\"\n\n   Parameters: errorCode (integer).\n   Returns:    String (Additional diagnostic information about the given error code).\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.debug.getDiagnosticInfo = function(errorCode){\n\n    var scorm = pipwerks.SCORM,\n        API = scorm.API.getHandle(),\n        trace = pipwerks.UTILS.trace,\n        result = \"\";\n\n    if(API){\n\n        switch(scorm.version){\n            case \"1.2\" : result = API.LMSGetDiagnostic(errorCode); break;\n            case \"2004\": result = API.GetDiagnostic(errorCode); break;\n        }\n\n    } else {\n\n        trace(\"SCORM.debug.getDiagnosticInfo failed: API is null.\");\n\n    }\n\n    return String(result);\n\n};\n\n\n// ------------------------------------------------------------------------- //\n// --- Shortcuts! ---------------------------------------------------------- //\n// ------------------------------------------------------------------------- //\n\n// Because nobody likes typing verbose code.\n\npipwerks.SCORM.init = pipwerks.SCORM.connection.initialize;\npipwerks.SCORM.get  = pipwerks.SCORM.data.get;\npipwerks.SCORM.set  = pipwerks.SCORM.data.set;\npipwerks.SCORM.save = pipwerks.SCORM.data.save;\npipwerks.SCORM.quit = pipwerks.SCORM.connection.terminate;\n\n\n\n// ------------------------------------------------------------------------- //\n// --- pipwerks.UTILS functions -------------------------------------------- //\n// ------------------------------------------------------------------------- //\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.UTILS.StringToBoolean()\n   Converts 'boolean strings' into actual valid booleans.\n\n   (Most values returned from the API are the strings \"true\" and \"false\".)\n\n   Parameters: String\n   Returns:    Boolean\n---------------------------------------------------------------------------- */\n\npipwerks.UTILS.StringToBoolean = function(value){\n    var t = typeof value;\n    switch(t){\n       //typeof new String(\"true\") === \"object\", so handle objects as string via fall-through.\n       //See https://github.com/pipwerks/scorm-api-wrapper/issues/3\n       case \"object\":\n       case \"string\": return (/(true|1)/i).test(value);\n       case \"number\": return !!value;\n       case \"boolean\": return value;\n       case \"undefined\": return null;\n       default: return false;\n    }\n};\n\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.UTILS.trace()\n   Displays error messages when in debug mode.\n\n   Parameters: msg (string)\n   Return:     None\n---------------------------------------------------------------------------- */\n\npipwerks.UTILS.trace = function(msg){\n\n     if(pipwerks.debug.isActive){\n\n        if(window.console && window.console.log){\n            window.console.log(msg);\n        } else {\n            //alert(msg);\n        }\n\n     }\n};\n"],"file":"SCORM_API_wrapper.js"}